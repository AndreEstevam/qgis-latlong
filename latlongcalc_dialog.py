# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatlongcalcDialog
                                 A QGIS plugin
 Allows conversion of latitude and longitude degrees between decimal degrees and DMS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-17
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Andr√© ECO
        email                : andre.estevam97@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'latlongcalc_dialog_base.ui'))


class LatlongcalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatlongcalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # connecting signals(valueChanged) to custom slots(latDMStoDD), which means 
        # whenever we change the spbLatD value, we will call the function latDMStoDD;
        # from DMS to DD
        self.spbLatD.valueChanged.connect(self.latDMStoDD)
        self.spbLatM.valueChanged.connect(self.latDMStoDD)
        self.spbLatS.valueChanged.connect(self.latDMStoDD)
        self.cmbLatH.currentTextChanged.connect(self.latDMStoDD)
        self.spbLongD.valueChanged.connect(self.longDMStoDD)
        self.spbLongM.valueChanged.connect(self.longDMStoDD)
        self.spbLongS.valueChanged.connect(self.longDMStoDD)
        self.cmbLongH.currentTextChanged.connect(self.longDMStoDD)
        
        # from DD to DMS
        # the editingFinished signal is sent only when the typing is finished,
        # avoiding a loop if we used the valueChanged signal;
        self.spbLatDD.editingFinished.connect(self.latDDtoDMS)
        self.spbLongDD.editingFinished.connect(self.longDDtoDMS)
        
        

    # defining slots(functions to be called whenever receving the signal)
    def latDMStoDD(self):
        iDeg = self.spbLatD.value()
        iMin = self.spbLatM.value()
        dSec = self.spbLatS.value()
        sHem = self.cmbLatH.currentText()
            
        dDD = float(iDeg) + iMin/60 + dSec/3600
        if sHem == "S":
            dDD = dDD * -1
        
        self.spbLatDD.setValue(dDD)
        
    def longDMStoDD(self):
        iDeg = self.spbLongD.value()
        iMin = self.spbLongM.value()
        dSec = self.spbLongS.value()
        sHem = self.cmbLongH.currentText()
            
        dDD = float(iDeg) + iMin/60 + dSec/3600
        if sHem == "W":
            dDD = dDD * -1
        
        self.spbLongDD.setValue(dDD)

    def latDDtoDMS(self):
        dDD = self.spbLatDD.value()
        
        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60
        
        self.spbLatD.setValue(abs(iDeg))
        self.spbLatM.setValue(abs(iMin))
        self.spbLatS.setValue(abs(dSec))
        
        if dDD < 0:
            self.cmbLatH.setCurrentText("S")
        else:
            self.cmbLatH.setCurrentText("N")

    def longDDtoDMS(self):
        dDD = self.spbLongDD.value()
        
        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60
        
        self.spbLongD.setValue(abs(iDeg))
        self.spbLongM.setValue(abs(iMin))
        self.spbLongS.setValue(abs(dSec))
        
        if dDD < 0:
            self.cmbLongH.setCurrentText("W")
        else:
            self.cmbLongH.setCurrentText("E")
